// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: channel.sql

package repository

import (
	"context"
	"database/sql"
	"time"
)

const createChannel = `-- name: CreateChannel :one
INSERT INTO channels (name, description, created_by)
VALUES (?, ?, ?)
RETURNING id, name, description, created_by, created_at
`

type CreateChannelParams struct {
	Name        string         `json:"name"`
	Description sql.NullString `json:"description"`
	CreatedBy   int64          `json:"createdBy"`
}

func (q *Queries) CreateChannel(ctx context.Context, arg CreateChannelParams) (Channel, error) {
	row := q.queryRow(ctx, q.createChannelStmt, createChannel, arg.Name, arg.Description, arg.CreatedBy)
	var i Channel
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.CreatedBy,
		&i.CreatedAt,
	)
	return i, err
}

const deleteChannel = `-- name: DeleteChannel :exec
DELETE FROM channels
WHERE id = ? AND created_by = ?
`

type DeleteChannelParams struct {
	ID        int64 `json:"id"`
	CreatedBy int64 `json:"createdBy"`
}

func (q *Queries) DeleteChannel(ctx context.Context, arg DeleteChannelParams) error {
	_, err := q.exec(ctx, q.deleteChannelStmt, deleteChannel, arg.ID, arg.CreatedBy)
	return err
}

const getAllChannels = `-- name: GetAllChannels :many
SELECT
    c.id,
    c.name,
    c.description,
    c.created_by,
    u.username AS created_by_username,
    c.created_at
FROM
    channels AS c
INNER JOIN
    users AS u ON u.id = c.created_by
ORDER BY
    c.id DESC
`

type GetAllChannelsRow struct {
	ID                int64          `json:"id"`
	Name              string         `json:"name"`
	Description       sql.NullString `json:"description"`
	CreatedBy         int64          `json:"createdBy"`
	CreatedByUsername string         `json:"createdByUsername"`
	CreatedAt         time.Time      `json:"createdAt"`
}

func (q *Queries) GetAllChannels(ctx context.Context) ([]GetAllChannelsRow, error) {
	rows, err := q.query(ctx, q.getAllChannelsStmt, getAllChannels)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllChannelsRow
	for rows.Next() {
		var i GetAllChannelsRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.CreatedBy,
			&i.CreatedByUsername,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getChannelByID = `-- name: GetChannelByID :one
SELECT id, name, description, created_by, created_at
FROM channels
WHERE id = ?
`

func (q *Queries) GetChannelByID(ctx context.Context, id int64) (Channel, error) {
	row := q.queryRow(ctx, q.getChannelByIDStmt, getChannelByID, id)
	var i Channel
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.CreatedBy,
		&i.CreatedAt,
	)
	return i, err
}
