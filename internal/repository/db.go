// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0

package repository

import (
	"context"
	"database/sql"
	"fmt"
)

type DBTX interface {
	ExecContext(context.Context, string, ...interface{}) (sql.Result, error)
	PrepareContext(context.Context, string) (*sql.Stmt, error)
	QueryContext(context.Context, string, ...interface{}) (*sql.Rows, error)
	QueryRowContext(context.Context, string, ...interface{}) *sql.Row
}

func New(db DBTX) *Queries {
	return &Queries{db: db}
}

func Prepare(ctx context.Context, db DBTX) (*Queries, error) {
	q := Queries{db: db}
	var err error
	if q.createChannelStmt, err = db.PrepareContext(ctx, createChannel); err != nil {
		return nil, fmt.Errorf("error preparing query CreateChannel: %w", err)
	}
	if q.createMessageStmt, err = db.PrepareContext(ctx, createMessage); err != nil {
		return nil, fmt.Errorf("error preparing query CreateMessage: %w", err)
	}
	if q.createUserStmt, err = db.PrepareContext(ctx, createUser); err != nil {
		return nil, fmt.Errorf("error preparing query CreateUser: %w", err)
	}
	if q.deleteChannelStmt, err = db.PrepareContext(ctx, deleteChannel); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteChannel: %w", err)
	}
	if q.deleteMessageByChannelStmt, err = db.PrepareContext(ctx, deleteMessageByChannel); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteMessageByChannel: %w", err)
	}
	if q.getAllChannelsStmt, err = db.PrepareContext(ctx, getAllChannels); err != nil {
		return nil, fmt.Errorf("error preparing query GetAllChannels: %w", err)
	}
	if q.getChannelByIDStmt, err = db.PrepareContext(ctx, getChannelByID); err != nil {
		return nil, fmt.Errorf("error preparing query GetChannelByID: %w", err)
	}
	if q.getMessagesByChannelStmt, err = db.PrepareContext(ctx, getMessagesByChannel); err != nil {
		return nil, fmt.Errorf("error preparing query GetMessagesByChannel: %w", err)
	}
	if q.getUserByIDStmt, err = db.PrepareContext(ctx, getUserByID); err != nil {
		return nil, fmt.Errorf("error preparing query GetUserByID: %w", err)
	}
	if q.getUserByUsernameStmt, err = db.PrepareContext(ctx, getUserByUsername); err != nil {
		return nil, fmt.Errorf("error preparing query GetUserByUsername: %w", err)
	}
	return &q, nil
}

func (q *Queries) Close() error {
	var err error
	if q.createChannelStmt != nil {
		if cerr := q.createChannelStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createChannelStmt: %w", cerr)
		}
	}
	if q.createMessageStmt != nil {
		if cerr := q.createMessageStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createMessageStmt: %w", cerr)
		}
	}
	if q.createUserStmt != nil {
		if cerr := q.createUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createUserStmt: %w", cerr)
		}
	}
	if q.deleteChannelStmt != nil {
		if cerr := q.deleteChannelStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteChannelStmt: %w", cerr)
		}
	}
	if q.deleteMessageByChannelStmt != nil {
		if cerr := q.deleteMessageByChannelStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteMessageByChannelStmt: %w", cerr)
		}
	}
	if q.getAllChannelsStmt != nil {
		if cerr := q.getAllChannelsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getAllChannelsStmt: %w", cerr)
		}
	}
	if q.getChannelByIDStmt != nil {
		if cerr := q.getChannelByIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getChannelByIDStmt: %w", cerr)
		}
	}
	if q.getMessagesByChannelStmt != nil {
		if cerr := q.getMessagesByChannelStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getMessagesByChannelStmt: %w", cerr)
		}
	}
	if q.getUserByIDStmt != nil {
		if cerr := q.getUserByIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getUserByIDStmt: %w", cerr)
		}
	}
	if q.getUserByUsernameStmt != nil {
		if cerr := q.getUserByUsernameStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getUserByUsernameStmt: %w", cerr)
		}
	}
	return err
}

func (q *Queries) exec(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (sql.Result, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).ExecContext(ctx, args...)
	case stmt != nil:
		return stmt.ExecContext(ctx, args...)
	default:
		return q.db.ExecContext(ctx, query, args...)
	}
}

func (q *Queries) query(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (*sql.Rows, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryContext(ctx, args...)
	default:
		return q.db.QueryContext(ctx, query, args...)
	}
}

func (q *Queries) queryRow(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) *sql.Row {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryRowContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryRowContext(ctx, args...)
	default:
		return q.db.QueryRowContext(ctx, query, args...)
	}
}

type Queries struct {
	db                         DBTX
	tx                         *sql.Tx
	createChannelStmt          *sql.Stmt
	createMessageStmt          *sql.Stmt
	createUserStmt             *sql.Stmt
	deleteChannelStmt          *sql.Stmt
	deleteMessageByChannelStmt *sql.Stmt
	getAllChannelsStmt         *sql.Stmt
	getChannelByIDStmt         *sql.Stmt
	getMessagesByChannelStmt   *sql.Stmt
	getUserByIDStmt            *sql.Stmt
	getUserByUsernameStmt      *sql.Stmt
}

func (q *Queries) WithTx(tx *sql.Tx) *Queries {
	return &Queries{
		db:                         tx,
		tx:                         tx,
		createChannelStmt:          q.createChannelStmt,
		createMessageStmt:          q.createMessageStmt,
		createUserStmt:             q.createUserStmt,
		deleteChannelStmt:          q.deleteChannelStmt,
		deleteMessageByChannelStmt: q.deleteMessageByChannelStmt,
		getAllChannelsStmt:         q.getAllChannelsStmt,
		getChannelByIDStmt:         q.getChannelByIDStmt,
		getMessagesByChannelStmt:   q.getMessagesByChannelStmt,
		getUserByIDStmt:            q.getUserByIDStmt,
		getUserByUsernameStmt:      q.getUserByUsernameStmt,
	}
}
