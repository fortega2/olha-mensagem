// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: message.sql

package repository

import (
	"context"
	"time"
)

const createMessage = `-- name: CreateMessage :exec
INSERT INTO messages (channel_id, user_id, content)
VALUES (?, ?, ?)
`

type CreateMessageParams struct {
	ChannelID int64  `json:"channelId"`
	UserID    int64  `json:"userId"`
	Content   string `json:"content"`
}

func (q *Queries) CreateMessage(ctx context.Context, arg CreateMessageParams) error {
	_, err := q.exec(ctx, q.createMessageStmt, createMessage, arg.ChannelID, arg.UserID, arg.Content)
	return err
}

const getHistoryMessagesByChannel = `-- name: GetHistoryMessagesByChannel :many
SELECT
    m.id,
    m.channel_id,
    m.user_id,
    u.username AS user_username,
    m.content,
    m.created_at
FROM
    messages AS m
INNER JOIN
    users AS u ON u.id = m.user_id
WHERE
    m.channel_id = ?
ORDER BY
    m.created_at ASC
LIMIT
    ?
`

type GetHistoryMessagesByChannelParams struct {
	ChannelID int64 `json:"channelId"`
	Limit     int64 `json:"limit"`
}

type GetHistoryMessagesByChannelRow struct {
	ID           int64     `json:"id"`
	ChannelID    int64     `json:"channelId"`
	UserID       int64     `json:"userId"`
	UserUsername string    `json:"userUsername"`
	Content      string    `json:"content"`
	CreatedAt    time.Time `json:"createdAt"`
}

func (q *Queries) GetHistoryMessagesByChannel(ctx context.Context, arg GetHistoryMessagesByChannelParams) ([]GetHistoryMessagesByChannelRow, error) {
	rows, err := q.query(ctx, q.getHistoryMessagesByChannelStmt, getHistoryMessagesByChannel, arg.ChannelID, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetHistoryMessagesByChannelRow
	for rows.Next() {
		var i GetHistoryMessagesByChannelRow
		if err := rows.Scan(
			&i.ID,
			&i.ChannelID,
			&i.UserID,
			&i.UserUsername,
			&i.Content,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
